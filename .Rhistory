destfile=file.path(imgdir,"South_Asia.png")
terrmap <- GetMap.bbox(lon,lat, size=c(640,640), maptype="satellite",
zoom=max(MaxZoom(range(lat), range(lon))),
destfile=destfile)
png(filename=destfile, width=0.8, height=0.8,units = "in",pointsize=12, bg="transparent", res=240)
PlotOnStaticMap(terrmap)
dev.off()
svalue(tbl2[2,3])=destfile
unlink(c(destfile,paste(destfile,".rda",sep="")))
}
})
tblradio <- glayout(container=g,horizontal=FALSE,expand=TRUE)
#addSpace(g, 10, horizontal=FALSE)
tblradio[1,1] <- glabel("Precipitation Data Source")
font(tblradio[1,1]) <- c(family="times",size="large",style="italic")
tblradio[1,2] <- gradio(c("RFE","MERRA"),horizontal=TRUE)
font(tblradio[1,2]) <- c(family="times",size="large",style="italic")
#tblradio[2,1] <- glabel("MERRA is global data source")
#tblradio[3,1] <- glabel("RFE supports South Asia for This application")
#font(tblradio[2,1]) <- c(family="times",size="large",style="italic")
#font(tblradio[3,1]) <- c(family="times",size="large",style="italic")
tbl3 <- glayout(container=g,horizontal=FALSE,expand=TRUE)
#addSpace(g, 10, horizontal=FALSE)
text="Destination Directory"
#addSpace(g, 10, horizontal=FALSE)
tbl3[1,1] <- glabel("Or Upload Your Shapefile Here")
font(tbl3[1,1]) <- c(family="times",size="large",style="italic")
tbl3[1,2] <- gfilebrowse(width=70,pos=0,type="open",quote=FALSE)
font(tbl3[1,1]) <- c(family="times",size="large",style="italic")
tbl3[2,1] <- glabel(text)
font(tbl3[2,1]) <- c(family="times",size="large",style="italic")
tbl3[2,2] <- gfilebrowse(text=getwd(),width=70,pos=0,type="selectdir",quote=FALSE)
font(tbl3[2,2]) <- c(family="times",size="large",style="italic")
addHandlerChanged(tbl3[1,2], function(h,...) {
library(PBSmapping)
require(RgoogleMaps)
require(rgdal)
require(PBSmapping)
shpspl=unlist(strsplit(svalue(tbl3[1,2]),"[.]"))
lenspl=length(shpspl)
if(!shpspl[lenspl]=="shp"){shpmsg="requires a shapefile"}
shpchr=nchar(svalue(tbl3[1,2]), type = "chars", allowNA = FALSE)
polyShpFile=substr(x = svalue(tbl3[1,2]), start = 1, stop = (shpchr-4))
shpPolySet=importShapefile(polyShpFile,projection="LL")
latsr = round(range(shpPolySet$Y), 4)
lonsr = round(range(shpPolySet$X), 4)
centerPt = c(mean(latsr),mean(lonsr))
boundBox = qbbox(lat = latsr,lon = lonsr)
destfile=file.path(imgdir,"South_Asia.png")
png(filename=destfile, width=0.8, height=0.8,units = "in",pointsize=12, bg="transparent", res=240)
mapFromBbox = GetMap.bbox(boundBox$lonR,boundBox$latR,maptype="terrain")
PlotPolysOnStaticMap(mapFromBbox, shpPolySet, col=rgb(1, 1, 1, alpha=0.3),
lwd=2, border="red",add = F)
dev.off() # end of example
svalue(tbl2[2,3])=destfile
svalue(tbl2[1,3])=latsr[2]
svalue(tbl2[3,3])=latsr[1]
svalue(tbl2[2,4])=lonsr[2]
svalue(tbl2[2,2])=lonsr[1]
})
addHandlerChanged(tbl3[2,2], function(h,...)
{
svalue(tbl[1,2])=paste(svalue(tbl3[2,2]),"\\MODIS","\\MOD12Q1_LandCoverType_IGBP_SouthAsia_Geographic.tif",sep="")
svalue(tbl[3,2])=paste(svalue(tbl3[2,2]),"\\MODIS","\\landcover.csv",sep="")
svalue(tbl6[1,2])=paste(svalue(tbl3[2,2]),"\\MERRATrange","\\MERRAAvgMonthlyTrange.nc",sep="")
svalue(tbl4[1,2])=svalue(tbl3[2,2])
svalue(tbl4[2,2])=paste(svalue(tbl3[2,2]),"\\MERRAgeo",sep="")
svalue(tbl4[3,2])=paste(svalue(tbl3[2,2]),"\\UEBinputs",sep="")
svalue(tbl4[5,2])=paste(svalue(tbl3[2,2]),"\\UEBinputs",sep="")
svalue(tbl[4,2])=paste(svalue(tbl3[2,2]),"\\UEBinputs",sep="")
svalue(tbl6[3,2])=paste(svalue(tbl3[2,2]),"\\UEBinputs",sep="")
})
group2 <- ggroup(container=g,horizontal=TRUE)
addSpring(group2)
inforButton1 <- gbutton("Information", container=group2,handler=function(h,...){
confirmDialog(text="gerneral Info","This script will download MERRA and RFE data
and its inputs are:
1. Start and end of the downloading date
2. latitude and longitde boundary")})
tblbtn1 <- gbutton("Download Data", container=group2)
#btn_quit <- gbutton(text = "  Close window  ",container = group2, handler=function(...) dispose(win))
addHandlerChanged(tblbtn1, function(h,...) {
if(svalue(tblradio[1,2])=="MERRA")
{
RFEdom=c(90,-90,180,-180)
latn=svalue(tbl2[1,3])
lats=svalue(tbl2[3,3])
lone=svalue(tbl2[2,4])
lonw=svalue(tbl2[2,2])
testnum <- function(x) is.numeric(x) & !is.na(x)
bound=testnum(c(latn,lats,lone,lonw))
bound2=c(checkrangedate(RFEdom[2],RFEdom[1],as.numeric(latn)),
checkrangedate(RFEdom[2],RFEdom[1],as.numeric(lats)),
checkrangedate(RFEdom[4],RFEdom[3],as.numeric(lone)),
checkrangedate(RFEdom[4],RFEdom[3],as.numeric(lonw)))
boundchk3=!(bound&bound2)
boundchk1=!(as.numeric(lone)>as.numeric(lonw))
boundchk2=!(as.numeric(latn)>as.numeric(lats))
bounds=c(boundchk3,boundchk1,boundchk2)
msgs=c("Latitude North: must be number between -90 and 90",
"Latitude South: must be number between -90 and 90",
"Longitude East: must be number between -180 and 180",
"Longitude West: must be number between -180 and 180",
"Longitude East must be higher than Longitude West",
"Latitude North must be higher than Latitude South")
msgshow=msgs[bounds|is.na(bounds)]
}
if(svalue(tblradio[1,2])=="RFE")
{
RFEdom=c(35,5,110,70)
latn=svalue(tbl2[1,3])
lats=svalue(tbl2[3,3])
lone=svalue(tbl2[2,4])
lonw=svalue(tbl2[2,2])
testnum <- function(x) is.numeric(x) & !is.na(x)
bound=testnum(c(latn,lats,lone,lonw))
bound2=c(checkrangedate(RFEdom[2],RFEdom[1],as.numeric(latn)),
checkrangedate(RFEdom[2],RFEdom[1],as.numeric(lats)),
checkrangedate(RFEdom[4],RFEdom[3],as.numeric(lone)),
checkrangedate(RFEdom[4],RFEdom[3],as.numeric(lonw)))
boundchk3=!(bound&bound2)
boundchk1=!(as.numeric(lone)>as.numeric(lonw))
boundchk2=!(as.numeric(latn)>as.numeric(lats))
bounds=c(boundchk3,boundchk1,boundchk2)
msgs=c("Latitude North: must be number between 5 and 35",
"Latitude South: must be number between 5 and 35",
"Longitude East: must be number between 70 and 110",
"Longitude West: must be number between 70 and 110",
"Longitude East must be higher than Longitude West",
"Latitude North must be higher than Latitude South")
msgshow=msgs[bounds|is.na(bounds)]
}
stdate=svalue(tbl1[1,2])
endate=svalue(tbl1[1,4])
RFEstdate=as.Date("2001-05-01",format= "%Y-%m-%d")
RFEendate=Sys.Date()-90
chk1=!checkrangedate(RFEstdate, RFEendate, stdate)
chk2=!checkrangedate(RFEstdate, RFEendate, endate)
chk3=!(endate>=stdate)
chks=c(chk1,chk2,chk3)
msgs2=c("Start date must be between 2001-05-01 and 90 days past from today",
"End date must be between 2001-05-01 and 90 days past from today",
"End Date must be higher than Start date")
msgshow2=msgs2[chks|is.na(chks)]
if(length(c(msgshow,msgshow2))>0)
{
confirmDialog(text="Error!",c(msgshow,msgshow2))
}else{
DestDir=svalue(tbl3[2,2])
latsouth=as.numeric(svalue(tbl2[3,3]))
latnorth=as.numeric(svalue(tbl2[1,3]))
lonwest=as.numeric(svalue(tbl2[2,2]))
loneast=as.numeric(svalue(tbl2[2,4]))
startdate=as.Date(svalue(tbl1[1,2]))
enddate=as.Date(svalue(tbl1[1,4]))
PrecipDataSource=svalue(tblradio[1,2])
list(DestDir,latsouth,latnorth,lonwest,loneast,startdate,enddate,PrecipDataSource)
do.call("downloadMERRARFE",list(DestDir,latsouth,latnorth,lonwest,loneast,startdate,enddate,PrecipDataSource))
confirmDialog(text="Success!","data downloading is successfully completed!",img="ok")
}
})
#WINDOW 2------------------------------------------
#--------------------------------------------------
#--------------------------------------------------
#texts to help the users
texts=c("MERRA and RFE data Directory","Geo-potential File Directory",
"Output Directory","DEM TIFF File (input)", "Lat-lon Output Directory (output)")
g <- ggroup(horizontal=FALSE, cont=nb, label = "Downscaling")
tbl4 <- glayout(container=g,horizontal=FALSE,expand=TRUE)
## Layout widgets
for( i in 1:length(texts)) {
tbl4[i,1] <- glabel(texts[i])
font(tbl4[i,1]) <- c(family="times",size="large",style="italic")
}
tbl4[1,2] <- gfilebrowse(text="",width=80,pos=0,type="selectdir",quote=FALSE)
tbl4[2,2] <- gfilebrowse(text="",width=80,pos=0,type="selectdir",quote=FALSE)
tbl4[3,2] <- gfilebrowse(text="",width=80,pos=0,type="selectdir",quote=FALSE)
tbl4[4,2] <- gfilebrowse(text="",width=80,pos=0,type="open",quote=FALSE)
tbl4[5,2] <- gfilebrowse(text="",width=80,pos=0,type="selectdir",quote=FALSE)
addHandlerChanged(tbl4[4,2], function(h,...)
{
svalue(tbl[2,2]) <- svalue(tbl4[4,2])
svalue(tbl6[2,2]) <- svalue(tbl4[4,2])
})
tbl5 <- glayout(container=g,horizontal=FALSE,expand=TRUE,spacing = 45)
tbl5[1,1] <- glabel("Start Date")
font(tbl5[1,1]) <- c(family="times",size="large",style="italic")
tbl5[1,2] <- gcalendar(format = "%Y-%m-%d") #initial.msg = "YYYY-MM-DD",
tbl5[1,3] <- glabel("End Date")
font(tbl5[1,3]) <- c(family="times",size="large",style="italic")
tbl5[1,4] <-  gcalendar(format = "%Y-%m-%d") #initial.msg = "YYYY-MM-DD",
#addSpace(g, 5, horizontal=FALSE)
tblradio2 <- glayout(container=g,horizontal=FALSE,expand=TRUE)
tblradio2[2,1] <- glabel("Lapse Rate Reference")
font(tblradio2[2,1]) <- c(family="times",size="large",style="italic")
tblradio2[2,2] <- gradio(c("ICIMOD","MicroMet","Logan River","User Defined"),horizontal=TRUE)
font(tblradio2[2,2]) <- c(family="times",size="large",style="italic")
tblradio2[2,3]=gbutton("Update Lapse Rate")
font(tblradio2[2,3]) <- c(family="times",size="large",style="italic")
addHandlerChanged(tblradio2[2,3], function(h,...) {
selctvar=svalue(tblradio2[2,2])
if(selctvar=="ICIMOD")
{
lapse=c(0.0092,0.00808,0.00337,0.00391,0.00293,0.00136,0.00347,0.0052,0.00663,0.00885,0.0114,0.00743)
}
if(selctvar=="MicroMet")
{
lapse=c(0.0044,0.0059,0.0071,0.0078,0.0081,0.0082,0.0081,0.0081,0.0077,0.0068,0.0055,0.0047)
}
if(selctvar=="Logan River")
{
lapse=c(0.0044,0.00464,0.0073,0.00604,0.0019,0.00705,0.0015,0.0026,0.00269,0.00606,0.004976,0.00605)
}
if(selctvar=="User Defined")
{
lapse=rep("",12)
}
for( i in 1:6){
font(tbl7[1,(i*2-1)]) <- c(family="times",size="large",style="italic")
svalue(tbl7[1,i*2]) <- as.character(lapse[i])
}
for( i in 1:6){
font(tbl7[2,(i*2-1)]) <- c(family="times",size="large",style="italic")
svalue(tbl7[2,i*2]) <- as.character(lapse[6+i])
}
})
frame1 <- gframe(container=g,horizontal=TRUE,text="Monthly Lapse Rate (Degree Celsius/meter)")
tbl7 <- glayout(container=frame1,horizontal=TRUE,expand=TRUE)
monthnames=c("January","February","March","April","May","June","July",
"August","September","October","November","December")
lapse=rep(0,12)
for( i in 1:6){
tbl7[1,(i*2-1)] <- glabel(monthnames[i])
font(tbl7[1,(i*2-1)]) <- c(family="times",size="large",style="italic")
tbl7[1,i*2] <- gedit(text = lapse[i], width = 10, coerce.with = as.numeric)
}
for( i in 1:6){
tbl7[2,(i*2-1)] <- glabel(monthnames[6+i])
font(tbl7[2,(i*2-1)]) <- c(family="times",size="large",style="italic")
tbl7[2,i*2] <- gedit(text = lapse[6+i], width = 10, coerce.with = as.numeric)
}
#addSpace(g, 5, horizontal=FALSE)
frame1 <- gframe(container=g,horizontal=TRUE,text="Monthly Precipitation Bias Corrector")
tbl8 <- glayout(container=frame1,horizontal=TRUE,expand=TRUE)
preciplapse=rep(1,each=12)
for( i in 1:6){
tbl8[1,(i*2-1)] <- glabel(monthnames[i])
font(tbl8[1,(i*2-1)]) <- c(family="times",size="large",style="italic")
tbl8[1,i*2] <- gedit(text = preciplapse[i], width = 10, coerce.with = as.numeric)
tbl8[2,(i*2-1)] <- glabel(monthnames[6+i])
font(tbl8[2,(i*2-1)]) <- c(family="times",size="large",style="italic")
tbl8[2,i*2] <- gedit(text = preciplapse[6+i], width = 10, coerce.with = as.numeric)
}
#addSpace(g, 10, horizontal=FALSE)
group2 <- ggroup(container=g,horizontal=TRUE)
addSpring(group2)
inforButton2 <- gbutton(text="Information","Information", container=group2,handler=function(h,...){
confirmDialog(text="Gerneral Info!","This script will downscale MERRA and RFE data for use in UEB
and its inputs are:
1. Directory that holds MERRA and RFE data
This must have within it folders MERRAcli, MERRArad, RFE
holding respectively the climate, radiation and precipitation data
2. Directory that holds MERRA Geopotential surface representation of elevation files
3. GeoTIFF DEM file that defines the UEB Model domain
4. downscaling start and end time
5. Set precipitation adjustment factor.
This value is used to multiply RFE precipitation to adjust for RFE precipitation biases")})
tblbtn2 <- gbutton("Downscale", container=group2)
#btn_quit <- gbutton(text = "  Close window  ",container = group2,handler=function(...) dispose(win))
addHandlerChanged(tblbtn2, function(h,...) {
formats="Tiff"
expectedformat="tif"
endstrtemp=unlist(strsplit(svalue(tbl4[4,2]),"[.]"))
entlen=length(endstrtemp)
endstr=endstrtemp[entlen]
if(endstr!=tolower(endstrtemp[entlen]))
{
msg=paste(texts[i+3],": ","Must be a ",formats," file",sep="")
}else{msg=NULL}
stdate=svalue(tbl5[1,2])
endate=svalue(tbl5[1,4])
RFEstdate=as.Date("2001-05-01",format= "%Y-%m-%d")
RFEendate=Sys.Date()-90
chk1=!checkrangedate(RFEstdate, RFEendate, stdate)
chk2=!checkrangedate(RFEstdate, RFEendate, endate)
chk3=!(endate>=stdate)
chks=is.na(c(chk1,chk2,chk3))
msgs2=c("Start date must be between 2001-05-01 and 90 days past from today",
"End date must be between 2001-05-01 and 90 days past from today",
"End Date muct be higher than Start date")
msgshow2=msgs2[chks]
lapsemsg=vector(length=12)
padjmsg=vector(length=12)
for(j in 1:2)
{
for(i in 1:6)
{
if(!is.numeric(svalue(tbl7[j,i*2])))
{
lapsemsg[(j-1)*6+i]=paste("Lapse rate for ",monthnames[(j-1)*6+i], " must be number")
}else{
lapsemsg[(j-1)*6+i]=NA
}
if(!is.numeric(svalue(tbl8[j,i*2])))
{padjmsg[(j-1)*6+i]=paste("Precipitation bias corrector for ", monthnames[(j-1)*6+i], "must be a number")
}else{
padjmsg[(j-1)*6+i]=NA
}
}
}
lapsemsg <- lapsemsg[!is.na(lapsemsg)]
padjmsg <- padjmsg[!is.na(padjmsg)]
if(length(c(msg,msgshow2,padjmsg,lapsemsg))>0)
{
confirmDialog(text="Error!",c(msg,padjmsg,msgshow2))
}else{
VarSourceDir=gsub("\\\\", "/",svalue(tbl4[1,2]))
GeoSourceDir=gsub("\\\\", "/",svalue(tbl4[2,2]))
DestDir=gsub("\\\\", "/",svalue(tbl4[3,2]))
DEMfile=gsub("\\\\", "/",svalue(tbl4[4,2]))
latfolder=gsub("\\\\", "/",svalue(tbl4[5,2]))
startdate=gsub("\\\\", "/",svalue(tbl5[1,2]))
enddate=gsub("\\\\", "/",svalue(tbl5[1,4]))
latlonfile = paste(latfolder,"/","lat-lon.txt",sep="")
PrecipDataSource=svalue(tblradio[1,2])
lapse=c(as.numeric(svalue(tbl7[1,2])),as.numeric(svalue(tbl7[1,4])),as.numeric(svalue(tbl7[1,6])),
as.numeric(svalue(tbl7[1,8])),as.numeric(svalue(tbl7[1,10])),as.numeric(svalue(tbl7[1,12])),
as.numeric(svalue(tbl7[2,2])),as.numeric(svalue(tbl7[2,4])),as.numeric(svalue(tbl7[2,6])),
as.numeric(svalue(tbl7[2,8])),as.numeric(svalue(tbl7[2,10])),as.numeric(svalue(tbl7[2,12])))
adjfactor=c(as.numeric(svalue(tbl8[1,2])),as.numeric(svalue(tbl8[1,4])),as.numeric(svalue(tbl8[1,6])),
as.numeric(svalue(tbl8[1,8])),as.numeric(svalue(tbl8[1,10])),as.numeric(svalue(tbl8[1,12])),
as.numeric(svalue(tbl8[2,2])),as.numeric(svalue(tbl8[2,4])),as.numeric(svalue(tbl8[2,6])),
as.numeric(svalue(tbl8[2,8])),as.numeric(svalue(tbl8[2,10])),as.numeric(svalue(tbl8[2,12])))
arglist=list(VarSourceDir,GeoSourceDir,DestDir,DEMfile,startdate,enddate,lapse,adjfactor,latlonfile,PrecipDataSource)
do.call("DownscaleMERRARFE",arglist)
confirmDialog(text="Success!","data dowsnscaling is successfully completed!",img="ok")
}
})
#WINDOW 3------------------------------------------
#--------------------------------------------------
#--------------------------------------------------
#texts to help the users
texts=c("Land Cover Tiff File","DEM Tiff File",
"Land Cover Classes CSV file","Output Folder")
g <- ggroup(horizontal=FALSE, cont=nb, label = "Land Cover Varibles")
tbl <- glayout(container=g,horizontal=FALSE,expand=TRUE)
## Layout widgets
for( i in 1:length(texts)) {
tbl[i,1] <- glabel(texts[i])
font(tbl[i,1]) <- c(family="times",size="large",style="italic")
}
browse1=paste(getwd(),"\\MODIS","\\MOD12Q1_LandCoverType_IGBP_SouthAsia_Geographic.tif",sep="")
browse2=paste(getwd(),"\\MODIS","\\landcover.csv",sep="")
tbl[1,2] <- gfilebrowse(browse1,pos=0,type="open",quote=FALSE)
tbl[2,2] <- gfilebrowse(pos=0,type="open",quote=FALSE)
tbl[3,2] <- gfilebrowse(browse2,width=70,pos=0,type="open",quote=FALSE)
tbl[4,2] <- gfilebrowse(text=getwd(),width=80,pos=0,type="selectdir",quote=FALSE)
#addSpace(g, 10, horizontal=FALSE)
group2 <- ggroup(container=g,horizontal=TRUE)
addSpring(group2)
inforButton3 <- gbutton("Information", container=group2,handler=function(h,...){
confirmDialog(text="General Info!","This script will 4 netCDF files for UEB site variable from MODIS land cover data
and its inputs are:
1. Geotiff file that holds MODIS data
2. CSV file that holds lookup table mapping MODIS classes onto UEB parameters
3. GeoTIFF DEM file that defines the UEB Model domain")})
tblbtn <- gbutton("Create Land Cover variables", container=group2)
#btn_quit <- gbutton(text = "  Close window  ",container = group2, handler=function(...) dispose(win))
addHandlerChanged(tblbtn, function(h,...) {
msgindex=c(1:3)
formats=c("Tiff","Tiff","csv")
expectedformat=c("tif","tif","csv")
endstr=vector("character",length=length(texts))
msg=vector("character",length=length(texts))
for(i in msgindex)
{
endstrtemp=unlist(strsplit(svalue(tbl[i,2]),"[.]"))
entlen=length(endstrtemp)
if(entlen > 0 & !is.na(formats[i])){
endstr[i]=tolower(endstrtemp[entlen])}
msg[i]=paste(texts[i],": ","Must be a ",formats[i]," file",sep="")
}
massages=msg[endstr != expectedformat]
if(length(massages)>0)
{
confirmDialog(text="Error!",msg[endstr != expectedformat])
}else{
do.call("vegfiles",list(svalue(tbl[1,2]),svalue(tbl[2,2]),
svalue(tbl[3,2]),svalue(tbl[4,2])))
confirmDialog(text="Success!","Vegegation related variable files are successfully created!",img="ok")
}
})
#WINDOW 4------------------------------------------
#--------------------------------------------------
#--------------------------------------------------
#texts to help the users
texts=c("South Asian Temperature Range", "DEM Tiff File", "Output Folder")
g <- ggroup(horizontal=FALSE, cont=nb, label = "Temperature Range Varibles")
tbl6 <- glayout(container=g,horizontal=FALSE,expand=TRUE)
## Layout widgets
for( i in 1:length(texts)) {
tbl6[i,1] <- glabel(texts[i])
font(tbl6[i,1]) <- c(family="times",size="large",style="italic")
}
for( i in 1:(length(texts)-1)) {
tbl6[i,2] <- gfilebrowse(width=70,pos=0,type="open",quote=FALSE)
}
tbl6[3,2]  <- gfilebrowse(text=getwd(),width=80,pos=0,type="selectdir",quote=FALSE)
group2 <- ggroup(container=g,horizontal=TRUE)
addSpring(group2)
inforButton4 <- gbutton("Information", container=group2,handler=function(h,...){
confirmDialog(text="General Info!","This script will write 12 netCDF files containing monthly diurnal temperature range
and its inputs are:
1. NetCDF file with climatological diurnal temperature ranges
2. GeoTIFF DEM file that defines the UEB Model domain")})
tblbtn4 <- gbutton("Create climatology files", container=group2)
#btn_quit <- gbutton(text = "  Close window  ",container = group2, handler=function(...) dispose(win))
addHandlerChanged(tblbtn4, function(h,...) {
msgindex=c(1:3)
formats=c("netCDF","Tiff",NA)
expectedformat=c("nc","tif","")
endstr=vector("character",length=length(texts))
msg=vector("character",length=length(texts))
for(i in msgindex)
{
endstrtemp=unlist(strsplit(svalue(tbl6[i,2]),"[.]"))
entlen=length(endstrtemp)
if(entlen > 0 & !is.na(formats[i]) ){
endstr[i]=tolower(endstrtemp[entlen])}
msg[i]=paste(texts[i],": ","Must be a ",formats[i]," file",sep="")
}
massages=msg[endstr != expectedformat]
if(length(massages)>0)
{
confirmDialog(text="Error!",msg[endstr != expectedformat])
}else{
do.call("MERRAAvgMonthlyTrange",list(svalue(tbl6[1,2]),svalue(tbl6[2,2]),svalue(tbl6[3,2])))
confirmDialog(text="Success!","Climatological variables are successfully created!",img="ok")
}
})
# keep the windows open when opeing from command prompt
while(isExtant(win)) Sys.sleep(1)
q()
5.32/9.43
5.43/9.43
5.02/9.43
q()
.0005*365
q()
installPackages("ggplot")
.0005*365
installPackages("ggplot2")
setwd("C:/Users/avirup/Desktop")
library(shiny)
runExample("01_hello")
setwd("C:/Users/avirup/Desktop")
library(shiny)
runExample("bmi")
rsconnect::setAccountInfo(name='ratemymanager',
token='51922B469E5CF01A09F3437AE45BCABE',
secret='<SECRET>')
rsconnect::setAccountInfo(name='ratemymanager',
token='51922B469E5CF01A09F3437AE45BCABE',
secret='<SECRET>')
rsconnect::setAccountInfo(name='ratemymanager', token='51922B469E5CF01A09F3437AE45BCABE', secret='6ral4QuSNMoahiSSkWiYz4na9jnIIu7mXsDE25JM')
deployApp()
library(devtools)
library(Rtools)
installed.packages("Rtools")
deployApp()
library(rsconnect)
deployApp()
deployApp()
deployApp()
setwd("C:/Users/avirup/Desktop/xx")
runApp()
runApp('C:/Users/avirup/Desktop/Bmi')
setwd("C:/Users/avirup/Desktop/xx")
runApp('C:/Users/avirup/Desktop/Bmi')
runApp('C:/Users/avirup/Desktop/Bmi')
runApp('C:/Users/avirup/Desktop/Bmi')
deployApp()
rsconnect::setAccountInfo(name='ratemymanager', token='51922B469E5CF01A09F3437AE45BCABE', secret='6ral4QuSNMoahiSSkWiYz4na9jnIIu7mXsDE25JM')
deployApp()
shinyapps::deployApp('C:/Users/avirup/Desktop/Bmi')
runApp('C:/Users/avirup/Desktop/Bmi')
runApp('C:/Users/avirup/Desktop/Bmi')
runApp('C:/Users/avirup/Desktop/Bmi')
runApp('C:/Users/avirup/Desktop/Bmi')
runApp('C:/Users/avirup/Desktop/Bmi')
runApp('C:/Users/avirup/Desktop/Bmi')
runApp('C:/Users/avirup/Desktop/mtCarApp')
deployApp()
deployApp('C:/Users/avirup/Desktop/mtCarApp')
prob = predict(model, newdata, type="response")
library(slidify)
author("first deck")
author("first deck")
AvirupSenGupta
publish(user = "AvirupSenGupta", repo = "SlidifyExample")
publish(user = "AvirupSenGupta", repo = "SlidifyExample")
publish(user = "AvirupSenGupta", repo = "https://github.com/AvirupSenGupta/SlidifyExample/")
setwd("C:/Users/avirup/Desktop/mtCarApp")
publish(user = "AvirupSenGupta", repo = "https://github.com/AvirupSenGupta/SlidifyExample/")
publish(user = "AvirupSenGupta", repo = "SlidifyExample")
slidify("index.RMd")
slidify("index.Rmd")
browseURL("index.html")
publish_github(user = "AvirupSenGupta", repo = "SlidifyExample")
publish(user = "AvirupSenGupta", repo = "SlidifyExample")
publish(user = "AvirupSenGupta", repo = "SlidifyExample")
publish(user = "AvirupSenGupta", repo = "SlidifyExample")
